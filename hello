#!/usr/bin/env ruby
# encoding: UTF-8

require 'optparse'

Options = Struct.new(:greeting, :ng, :blink, :unicode, :server, :port)

options = Options.new
options.greeting = "Hello World!"
options.port = 8000

OptionParser.new do |opts|
  opts.banner = "Usage: hello [OPTION]"

  opts.separator "Print a friendly, customizable greeting."
  opts.separator ""

  opts.on("-h", "--help", "display this help and exit") do
    puts opts
    exit
  end

  opts.on("-v", "--version", "display version information and exit") do
    puts "super-hello 0.1.0-rc2"
    exit
  end

  opts.separator ""

  opts.on("-n", "--next-generation", "use next-generation greeting format") do
    options.ng = true
  end

  opts.on("-g", "--greeting=TEXT", "use TEXT as the greeting message") do |greeting|
    options.greeting = greeting
  end

  opts.on("-s", "--server", "launch http server to deliver greetings") do
    options.server = true
  end

  opts.on("-p", "--port=PORT", "listen on PORT (default 8000)") do |port|
    options.port = port.to_i
  end

  opts.on("-b", "--blink", "use ANSI escapes to blink text") do
    options.blink = true
  end

  opts.on("-u", "--unicode", "use unicode box drawing characters") do
    options.unicode = true
  end

  opts.separator ""

end.parse!

greeting = options.greeting

greeting =
  case
  when options.ng && options.unicode
    n = greeting.length + 2

    [
      "┌#{ '─' * n  }┐",
      "│ #{greeting} │",
      "└#{ '─' * n  }┘"
    ].join("\n")

  when options.ng
    n = greeting.length + 2

    [
      "+#{ '-' * n  }+",
      "| #{greeting} |",
      "+#{ '-' * n  }+"
    ].join("\n")

  else
    greeting
  end

greeting =
  if options.blink
    "\x1b[5m#{greeting}\x1b[0m"
  else
    greeting
  end

greeting = greeting + "\n"

if options.server
  require 'webrick'
  server = WEBrick::HTTPServer.new :Port => options.port
  server.mount_proc '/' do |req, res|
    res.content_type =
      if options.unicode
        "text/plain; charset=utf8"
      else
        "text/plain"
      end
    res.body = greeting
  end

  trap 'INT' do server.shutdown end

  server.start
else
  print greeting
end
